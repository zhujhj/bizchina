{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useCallback } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { pickChakraRandomColor, swap } from '../utils/helpers.ts';\nimport { debug } from '../utils/logging.ts';\nimport useTaskCollection from './useTaskCollection.ts';\nconst MAX_TASK_PER_COLUMN = 100;\nfunction useColumnTasks(column) {\n  _s();\n  const [tasks, setTasks] = useTaskCollection();\n  const columnTasks = tasks[column];\n  const addEmptyTask = useCallback(() => {\n    debug(`Adding new empty task to ${column} column`);\n    setTasks(allTasks => {\n      const columnTasks = allTasks[column];\n      if (columnTasks.length > MAX_TASK_PER_COLUMN) {\n        debug('Too many task!');\n        return allTasks;\n      }\n      const newColumnTask = {\n        id: uuidv4(),\n        title: `New ${column} task`,\n        color: pickChakraRandomColor('.300'),\n        column\n      };\n      return {\n        ...allTasks,\n        [column]: [newColumnTask, ...columnTasks]\n      };\n    });\n  }, [column, setTasks]);\n  const deleteTask = useCallback(id => {\n    debug(`Removing task ${id}..`);\n    setTasks(allTasks => {\n      const columnTasks = allTasks[column];\n      return {\n        ...allTasks,\n        [column]: columnTasks.filter(task => task.id !== id)\n      };\n    });\n  }, [column, setTasks]);\n  const updateTask = useCallback((id, updatedTask) => {\n    debug(`Updating task ${id} with ${JSON.stringify(updateTask)}`);\n    setTasks(allTasks => {\n      const columnTasks = allTasks[column];\n      return {\n        ...allTasks,\n        [column]: columnTasks.map(task => task.id === id ? {\n          ...task,\n          ...updatedTask\n        } : task)\n      };\n    });\n  }, [column, setTasks]);\n  const dropTaskFrom = useCallback((from, id) => {\n    setTasks(allTasks => {\n      const fromColumnTasks = allTasks[from];\n      const toColumnTasks = allTasks[column];\n      const movingTask = fromColumnTasks.find(task => task.id === id);\n      console.log(`Moving task ${movingTask === null || movingTask === void 0 ? void 0 : movingTask.id} from ${from} to ${column}`);\n      if (!movingTask) {\n        return allTasks;\n      }\n\n      // remove the task from the original column and copy it within the destination column\n      return {\n        ...allTasks,\n        [from]: fromColumnTasks.filter(task => task.id !== id),\n        [column]: [{\n          ...movingTask,\n          column\n        }, ...toColumnTasks]\n      };\n    });\n  }, [column, setTasks]);\n  const swapTasks = useCallback((i, j) => {\n    debug(`Swapping task ${i} with ${j} in ${column} column`);\n    setTasks(allTasks => {\n      const columnTasks = allTasks[column];\n      return {\n        ...allTasks,\n        [column]: swap(columnTasks, i, j)\n      };\n    });\n  }, [column, setTasks]);\n  return {\n    tasks: columnTasks,\n    addEmptyTask,\n    updateTask,\n    dropTaskFrom,\n    deleteTask,\n    swapTasks\n  };\n}\n_s(useColumnTasks, \"qEIoA/2RkhIvXKVJD4E22oyq9C0=\", false, function () {\n  return [useTaskCollection];\n});\nexport default useColumnTasks;","map":{"version":3,"names":["useCallback","v4","uuidv4","pickChakraRandomColor","swap","debug","useTaskCollection","MAX_TASK_PER_COLUMN","useColumnTasks","column","_s","tasks","setTasks","columnTasks","addEmptyTask","allTasks","length","newColumnTask","id","title","color","deleteTask","filter","task","updateTask","updatedTask","JSON","stringify","map","dropTaskFrom","from","fromColumnTasks","toColumnTasks","movingTask","find","console","log","swapTasks","i","j"],"sources":["/Users/jason/bizchina/src/dashboard/hooks/useColumnTasks.ts"],"sourcesContent":["import { useCallback } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { ColumnType } from '../utils/enums';\nimport { pickChakraRandomColor, swap } from '../utils/helpers.ts';\nimport { debug } from '../utils/logging.ts';\nimport { TaskModel } from '../utils/models.ts';\nimport useTaskCollection from './useTaskCollection.ts';\n\nconst MAX_TASK_PER_COLUMN = 100;\n\nfunction useColumnTasks(column: ColumnType) {\n  const [tasks, setTasks] = useTaskCollection();\n\n  const columnTasks = tasks[column];\n\n  const addEmptyTask = useCallback(() => {\n    debug(`Adding new empty task to ${column} column`);\n    setTasks((allTasks) => {\n      const columnTasks = allTasks[column];\n\n      if (columnTasks.length > MAX_TASK_PER_COLUMN) {\n        debug('Too many task!');\n        return allTasks;\n      }\n\n      const newColumnTask: TaskModel = {\n        id: uuidv4(),\n        title: `New ${column} task`,\n        color: pickChakraRandomColor('.300'),\n        column,\n      };\n\n      return {\n        ...allTasks,\n        [column]: [newColumnTask, ...columnTasks],\n      };\n    });\n  }, [column, setTasks]);\n\n  const deleteTask = useCallback(\n    (id: TaskModel['id']) => {\n      debug(`Removing task ${id}..`);\n      setTasks((allTasks) => {\n        const columnTasks = allTasks[column];\n        return {\n          ...allTasks,\n          [column]: columnTasks.filter((task) => task.id !== id),\n        };\n      });\n    },\n    [column, setTasks],\n  );\n\n  const updateTask = useCallback(\n    (id: TaskModel['id'], updatedTask: Omit<Partial<TaskModel>, 'id'>) => {\n      debug(`Updating task ${id} with ${JSON.stringify(updateTask)}`);\n      setTasks((allTasks) => {\n        const columnTasks = allTasks[column];\n        return {\n          ...allTasks,\n          [column]: columnTasks.map((task) =>\n            task.id === id ? { ...task, ...updatedTask } : task,\n          ),\n        };\n      });\n    },\n    [column, setTasks],\n  );\n\n  const dropTaskFrom = useCallback(\n    (from: ColumnType, id: TaskModel['id']) => {\n      setTasks((allTasks) => {\n        const fromColumnTasks = allTasks[from];\n        const toColumnTasks = allTasks[column];\n        const movingTask = fromColumnTasks.find((task) => task.id === id);\n\n        console.log(`Moving task ${movingTask?.id} from ${from} to ${column}`);\n\n        if (!movingTask) {\n          return allTasks;\n        }\n\n        // remove the task from the original column and copy it within the destination column\n        return {\n          ...allTasks,\n          [from]: fromColumnTasks.filter((task) => task.id !== id),\n          [column]: [{ ...movingTask, column }, ...toColumnTasks],\n        };\n      });\n    },\n    [column, setTasks],\n  );\n\n  const swapTasks = useCallback(\n    (i: number, j: number) => {\n      debug(`Swapping task ${i} with ${j} in ${column} column`);\n      setTasks((allTasks) => {\n        const columnTasks = allTasks[column];\n        return {\n          ...allTasks,\n          [column]: swap(columnTasks, i, j),\n        };\n      });\n    },\n    [column, setTasks],\n  );\n\n  return {\n    tasks: columnTasks,\n    addEmptyTask,\n    updateTask,\n    dropTaskFrom,\n    deleteTask,\n    swapTasks,\n  };\n}\n\nexport default useColumnTasks;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}