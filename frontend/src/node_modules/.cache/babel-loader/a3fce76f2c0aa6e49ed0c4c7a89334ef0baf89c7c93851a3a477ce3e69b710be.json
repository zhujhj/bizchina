{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useCallback } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { pickChakraRandomColor, swap } from '../utils/helpers.ts';\nimport { debug } from '../utils/logging.ts';\nimport useTaskCollection from './useTaskCollection.ts';\nimport firebase from \"firebase/compat/app\";\nimport 'firebase/compat/firestore';\nconst MAX_TASK_PER_COLUMN = 100;\nconst firestore = firebase.firestore();\nconst tasksCollection = firestore.collection('tasks');\nconst taskQueryById = id => tasksCollection.where('id', '==', id);\nconsole.log();\nconst saveTask = task => {\n  tasksCollection.add(task).then(_ => console.log(`task added: ${task.id}`));\n};\nconst deleteTaskById = taskId => {\n  taskQueryById(taskId).get().then(snapshot => {\n    snapshot.forEach(doc => doc.ref.delete());\n    console.log(`task deleted: ${taskId}`);\n  });\n};\nconst update = task => {\n  taskQueryById(task.id).get().then(snapshot => {\n    snapshot.forEach(doc => {\n      doc.ref.update(task);\n    });\n  });\n};\nconst updateColumn = task => {\n  taskQueryById(task.id).get().then(snapshot => {\n    snapshot.forEach(doc => {\n      doc.ref.update(task);\n    });\n  });\n};\nfunction useColumnTasks(column) {\n  _s();\n  localStorage.clear();\n  const [tasks, setTasks] = useTaskCollection();\n  const columnTasks = tasks[column];\n  const addEmptyTask = useCallback(() => {\n    debug(`Adding new empty task to ${column} column`);\n    setTasks(allTasks => {\n      const columnTasks = allTasks[column];\n      if (columnTasks.length > MAX_TASK_PER_COLUMN) {\n        debug('Too many task!');\n        return allTasks;\n      }\n      const newColumnTask = {\n        id: uuidv4(),\n        title: `New ${column} task`,\n        color: pickChakraRandomColor('.300'),\n        column\n      };\n      saveTask(newColumnTask);\n      return {\n        ...allTasks,\n        [column]: [newColumnTask, ...columnTasks]\n      };\n    });\n  }, [column, setTasks]);\n  const deleteTask = useCallback(id => {\n    debug(`Removing task ${id}..`);\n    setTasks(allTasks => {\n      const columnTasks = allTasks[column];\n      deleteTaskById(id);\n      return {\n        ...allTasks,\n        [column]: columnTasks.filter(task => task.id !== id)\n      };\n    });\n  }, [column, setTasks]);\n  const updateTask = useCallback((id, updatedTask) => {\n    debug(`Updating task ${id} with ${JSON.stringify(updateTask)}`);\n    setTasks(allTasks => {\n      const columnTasks = allTasks[column];\n      columnTasks.map(task => update(task));\n      return {\n        ...allTasks,\n        [column]: columnTasks.map(task => task.id === id ? {\n          ...task,\n          ...updatedTask\n        } : task)\n      };\n    });\n  }, [column, setTasks]);\n  const dropTaskFrom = useCallback((from, id) => {\n    setTasks(allTasks => {\n      const fromColumnTasks = allTasks[from];\n      const toColumnTasks = allTasks[column];\n      const movingTask = fromColumnTasks.find(task => task.id === id);\n      console.log(`Moving task ${movingTask === null || movingTask === void 0 ? void 0 : movingTask.id} from ${from} to ${column}`);\n      if (!movingTask) {\n        return allTasks;\n      }\n      columnTasks.map(task => update(task));\n\n      // remove the task from the original column and copy it within the destination column\n      return {\n        ...allTasks,\n        [from]: fromColumnTasks.filter(task => task.id !== id),\n        [column]: [{\n          ...movingTask,\n          column\n        }, ...toColumnTasks]\n      };\n    });\n  }, [column, setTasks]);\n  const swapTasks = useCallback((i, j) => {\n    debug(`Swapping task ${i} with ${j} in ${column} column`);\n    setTasks(allTasks => {\n      const columnTasks = allTasks[column];\n      return {\n        ...allTasks,\n        [column]: swap(columnTasks, i, j)\n      };\n    });\n  }, [column, setTasks]);\n  return {\n    tasks: columnTasks,\n    addEmptyTask,\n    updateTask,\n    dropTaskFrom,\n    deleteTask,\n    swapTasks\n  };\n}\n_s(useColumnTasks, \"qEIoA/2RkhIvXKVJD4E22oyq9C0=\", false, function () {\n  return [useTaskCollection];\n});\nexport default useColumnTasks;","map":{"version":3,"names":["useCallback","v4","uuidv4","pickChakraRandomColor","swap","debug","useTaskCollection","firebase","MAX_TASK_PER_COLUMN","firestore","tasksCollection","collection","taskQueryById","id","where","console","log","saveTask","task","add","then","_","deleteTaskById","taskId","get","snapshot","forEach","doc","ref","delete","update","updateColumn","useColumnTasks","column","_s","localStorage","clear","tasks","setTasks","columnTasks","addEmptyTask","allTasks","length","newColumnTask","title","color","deleteTask","filter","updateTask","updatedTask","JSON","stringify","map","dropTaskFrom","from","fromColumnTasks","toColumnTasks","movingTask","find","swapTasks","i","j"],"sources":["/Users/jason/bizchina/src/dashboard/hooks/useColumnTasks.ts"],"sourcesContent":["import { useCallback } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { ColumnType } from '../utils/enums';\nimport { pickChakraRandomColor, swap } from '../utils/helpers.ts';\nimport { debug } from '../utils/logging.ts';\nimport { TaskModel } from '../utils/models.ts';\nimport useTaskCollection from './useTaskCollection.ts';\nimport firebase from \"firebase/compat/app\";\nimport 'firebase/compat/firestore';\n\nconst MAX_TASK_PER_COLUMN = 100;\n\nconst firestore = firebase.firestore();\n\nconst tasksCollection = firestore.collection('tasks');\nconst taskQueryById = (id) => tasksCollection.where('id', '==', id);\n\nconsole.log();\n\nconst saveTask = (task: TaskModel) => {\n  tasksCollection.add(task)\n      .then(_ => console.log(`task added: ${task.id}`));\n}\n\n\nconst deleteTaskById = (taskId: TaskModel['id']) => {\n  taskQueryById(taskId)\n      .get()\n      .then(snapshot => {\n        snapshot.forEach(doc => doc.ref.delete());\n        console.log(`task deleted: ${taskId}`);\n      });\n}\n\nconst update = (task: TaskModel) => {\n  taskQueryById(task.id)\n      .get()\n      .then(snapshot => {\n        snapshot.forEach(doc => {\n          doc.ref.update(task);\n        })\n  });\n}\n\nconst updateColumn = (task: TaskModel) => {\n  taskQueryById(task.id)\n      .get()\n      .then(snapshot => {\n        snapshot.forEach(doc => {\n          doc.ref.update(task);\n        })\n  });\n}\n\nfunction useColumnTasks(column: ColumnType) {\n  localStorage.clear();\n  const [tasks, setTasks] = useTaskCollection();\n\n  const columnTasks = tasks[column];\n\n  const addEmptyTask = useCallback(() => {\n    debug(`Adding new empty task to ${column} column`);\n    setTasks((allTasks) => {\n      const columnTasks = allTasks[column];\n\n      if (columnTasks.length > MAX_TASK_PER_COLUMN) {\n        debug('Too many task!');\n        return allTasks;\n      }\n\n      const newColumnTask: TaskModel = {\n        id: uuidv4(),\n        title: `New ${column} task`,\n        color: pickChakraRandomColor('.300'),\n        column,\n      };\n\n      saveTask(newColumnTask);\n\n      return {\n        ...allTasks,\n        [column]: [newColumnTask, ...columnTasks],\n      };\n    });\n  }, [column, setTasks]);\n\n  const deleteTask = useCallback(\n    (id: TaskModel['id']) => {\n      debug(`Removing task ${id}..`);\n      setTasks((allTasks) => {\n        const columnTasks = allTasks[column];\n\n        deleteTaskById(id);\n\n        return {\n          ...allTasks,\n          [column]: columnTasks.filter((task) => task.id !== id),\n        };\n      });\n    },\n    [column, setTasks],\n  );\n\n  const updateTask = useCallback(\n    (id: TaskModel['id'], updatedTask: Omit<Partial<TaskModel>, 'id'>) => {\n      debug(`Updating task ${id} with ${JSON.stringify(updateTask)}`);\n      setTasks((allTasks) => {\n        const columnTasks = allTasks[column];\n\n        columnTasks.map((task) =>\n          update(task),\n        )\n        \n        return {\n          ...allTasks,\n          [column]: columnTasks.map((task) =>\n            task.id === id ? { ...task, ...updatedTask } : task,\n          ),\n        };\n      });\n    },\n    [column, setTasks],\n  );\n\n  const dropTaskFrom = useCallback(\n    (from: ColumnType, id: TaskModel['id']) => {\n      setTasks((allTasks) => {\n        const fromColumnTasks = allTasks[from];\n        const toColumnTasks = allTasks[column];\n        const movingTask = fromColumnTasks.find((task) => task.id === id);\n\n        console.log(`Moving task ${movingTask?.id} from ${from} to ${column}`);\n\n        if (!movingTask) {\n          return allTasks;\n        }\n\n        columnTasks.map((task) =>\n          update(task),\n        )\n\n        // remove the task from the original column and copy it within the destination column\n        return {\n          ...allTasks,\n          [from]: fromColumnTasks.filter((task) => task.id !== id),\n          [column]: [{ ...movingTask, column }, ...toColumnTasks],\n        };\n      });\n    },\n    [column, setTasks],\n  );\n\n  const swapTasks = useCallback(\n    (i: number, j: number) => {\n      debug(`Swapping task ${i} with ${j} in ${column} column`);\n      setTasks((allTasks) => {\n        const columnTasks = allTasks[column];\n        return {\n          ...allTasks,\n          [column]: swap(columnTasks, i, j),\n        };\n      });\n    },\n    [column, setTasks],\n  );\n\n  return {\n    tasks: columnTasks,\n    addEmptyTask,\n    updateTask,\n    dropTaskFrom,\n    deleteTask,\n    swapTasks,\n  };\n}\n\nexport default useColumnTasks;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}