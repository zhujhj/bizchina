{"ast":null,"code":"import { useCallback, useEffect, useState } from 'react';\nimport { useEventListener } from '..';\nfunction useReadLocalStorage(key) {\n  const readValue = useCallback(() => {\n    if (typeof window === 'undefined') {\n      return null;\n    }\n    try {\n      const item = window.localStorage.getItem(key);\n      return item ? JSON.parse(item) : null;\n    } catch (error) {\n      console.warn(`Error reading localStorage key “${key}”:`, error);\n      return null;\n    }\n  }, [key]);\n  const [storedValue, setStoredValue] = useState(readValue);\n  useEffect(() => {\n    setStoredValue(readValue());\n  }, []);\n  const handleStorageChange = useCallback(event => {\n    if ((event === null || event === void 0 ? void 0 : event.key) && event.key !== key) {\n      return;\n    }\n    setStoredValue(readValue());\n  }, [key, readValue]);\n  useEventListener('storage', handleStorageChange);\n  useEventListener('local-storage', handleStorageChange);\n  return storedValue;\n}\nexport default useReadLocalStorage;","map":{"version":3,"names":["useCallback","useEffect","useState","useEventListener","useReadLocalStorage","key","readValue","window","item","localStorage","getItem","JSON","parse","error","console","warn","storedValue","setStoredValue","handleStorageChange","event"],"sources":["/Users/jason/bizchina/node_modules/usehooks-ts/dist/esm/useReadLocalStorage/useReadLocalStorage.js"],"sourcesContent":["import { useCallback, useEffect, useState } from 'react';\nimport { useEventListener } from '..';\nfunction useReadLocalStorage(key) {\n    const readValue = useCallback(() => {\n        if (typeof window === 'undefined') {\n            return null;\n        }\n        try {\n            const item = window.localStorage.getItem(key);\n            return item ? JSON.parse(item) : null;\n        }\n        catch (error) {\n            console.warn(`Error reading localStorage key “${key}”:`, error);\n            return null;\n        }\n    }, [key]);\n    const [storedValue, setStoredValue] = useState(readValue);\n    useEffect(() => {\n        setStoredValue(readValue());\n    }, []);\n    const handleStorageChange = useCallback((event) => {\n        if ((event === null || event === void 0 ? void 0 : event.key) && event.key !== key) {\n            return;\n        }\n        setStoredValue(readValue());\n    }, [key, readValue]);\n    useEventListener('storage', handleStorageChange);\n    useEventListener('local-storage', handleStorageChange);\n    return storedValue;\n}\nexport default useReadLocalStorage;\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AACxD,SAASC,gBAAgB,QAAQ,IAAI;AACrC,SAASC,mBAAmBA,CAACC,GAAG,EAAE;EAC9B,MAAMC,SAAS,GAAGN,WAAW,CAAC,MAAM;IAChC,IAAI,OAAOO,MAAM,KAAK,WAAW,EAAE;MAC/B,OAAO,IAAI;IACf;IACA,IAAI;MACA,MAAMC,IAAI,GAAGD,MAAM,CAACE,YAAY,CAACC,OAAO,CAACL,GAAG,CAAC;MAC7C,OAAOG,IAAI,GAAGG,IAAI,CAACC,KAAK,CAACJ,IAAI,CAAC,GAAG,IAAI;IACzC,CAAC,CACD,OAAOK,KAAK,EAAE;MACVC,OAAO,CAACC,IAAI,CAAE,mCAAkCV,GAAI,IAAG,EAAEQ,KAAK,CAAC;MAC/D,OAAO,IAAI;IACf;EACJ,CAAC,EAAE,CAACR,GAAG,CAAC,CAAC;EACT,MAAM,CAACW,WAAW,EAAEC,cAAc,CAAC,GAAGf,QAAQ,CAACI,SAAS,CAAC;EACzDL,SAAS,CAAC,MAAM;IACZgB,cAAc,CAACX,SAAS,CAAC,CAAC,CAAC;EAC/B,CAAC,EAAE,EAAE,CAAC;EACN,MAAMY,mBAAmB,GAAGlB,WAAW,CAAEmB,KAAK,IAAK;IAC/C,IAAI,CAACA,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,KAAK,CAACd,GAAG,KAAKc,KAAK,CAACd,GAAG,KAAKA,GAAG,EAAE;MAChF;IACJ;IACAY,cAAc,CAACX,SAAS,CAAC,CAAC,CAAC;EAC/B,CAAC,EAAE,CAACD,GAAG,EAAEC,SAAS,CAAC,CAAC;EACpBH,gBAAgB,CAAC,SAAS,EAAEe,mBAAmB,CAAC;EAChDf,gBAAgB,CAAC,eAAe,EAAEe,mBAAmB,CAAC;EACtD,OAAOF,WAAW;AACtB;AACA,eAAeZ,mBAAmB"},"metadata":{},"sourceType":"module","externalDependencies":[]}