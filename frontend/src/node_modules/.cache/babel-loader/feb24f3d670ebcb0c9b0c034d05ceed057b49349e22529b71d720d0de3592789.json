{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useLocalStorage } from 'usehooks-ts';\nimport { v4 as uuidv4 } from 'uuid';\nimport { ColumnType } from '../utils/enums.ts';\nimport '../../firebaseConfig.js';\nimport 'firebase/compat/analytics';\nimport firebase from 'firebase/compat/app';\nimport 'firebase/compat/auth';\nimport 'firebase/compat/firestore';\nimport { getAuth } from \"firebase/auth\";\nconst auth = getAuth();\nconst firestore = firebase.firestore();\nconst kanbanRef = firestore.collection('tasks');\nlet todo = [];\nlet inProgress = [];\nlet blocked = [];\nlet completed = [];\nconst query = kanbanRef.orderBy('id');\nconsole.log(\"kanban \" + query);\n// const [tasks] = useCollectionData(query, { idField: 'id' });\n\n// for (let task in kanbanRef.get()) {\n//   if (task['column'] === \"Todo\") {\n//     todo.push(task);\n//   } else if (task['column'] === \"In Progress\") {\n//     inProgress.push(task);\n//   } else if (task['column'] === \"Blocked\") {\n\n//   } else if (task['column'] === \"Completed\") {\n\n//   }\n// }\n\nfunction useTaskCollection() {\n  _s();\n  return useLocalStorage('tasks', {\n    Todo: [{\n      id: uuidv4(),\n      column: ColumnType.TO_DO,\n      title: 'Task 1',\n      color: 'blue.300'\n    }],\n    'In Progress': [{\n      id: uuidv4(),\n      column: ColumnType.IN_PROGRESS,\n      title: 'Task 2',\n      color: 'yellow.300'\n    }],\n    Blocked: [{\n      id: uuidv4(),\n      column: ColumnType.BLOCKED,\n      title: 'Task 3',\n      color: 'red.300'\n    }],\n    Completed: [\n      // {\n      //   id: uuidv4(),\n      //   column: ColumnType.COMPLETED,\n      //   title: 'Task 4',\n      //   color: 'green.300',\n      // },\n    ]\n  });\n}\n_s(useTaskCollection, \"cjcH6UV3r3BpJj6dUjZ/UwDNNow=\", false, function () {\n  return [useLocalStorage];\n});\nexport default useTaskCollection;","map":{"version":3,"names":["useLocalStorage","v4","uuidv4","ColumnType","firebase","getAuth","auth","firestore","kanbanRef","collection","todo","inProgress","blocked","completed","query","orderBy","console","log","useTaskCollection","_s","Todo","id","column","TO_DO","title","color","IN_PROGRESS","Blocked","BLOCKED","Completed"],"sources":["/Users/jason/bizchina/src/dashboard/hooks/useTaskCollection.ts"],"sourcesContent":["import { useLocalStorage } from 'usehooks-ts';\n\nimport { v4 as uuidv4 } from 'uuid';\nimport { ColumnType } from '../utils/enums.ts';\nimport { TaskModel } from '../utils/models.ts';\n\nimport '../../firebaseConfig.js';\n\nimport 'firebase/compat/analytics';\nimport firebase from 'firebase/compat/app';\nimport 'firebase/compat/auth';\nimport 'firebase/compat/firestore';\n\nimport { getAuth } from \"firebase/auth\";\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\n\nconst auth = getAuth();\nconst firestore = firebase.firestore();\n\nconst kanbanRef = firestore.collection('tasks');\nlet todo: TaskModel[] = [];\nlet inProgress = [];\nlet blocked = [];\nlet completed = [];\n\nconst query = kanbanRef.orderBy('id');\nconsole.log(\"kanban \" + query);\n// const [tasks] = useCollectionData(query, { idField: 'id' });\n\n// for (let task in kanbanRef.get()) {\n//   if (task['column'] === \"Todo\") {\n//     todo.push(task);\n//   } else if (task['column'] === \"In Progress\") {\n//     inProgress.push(task);\n//   } else if (task['column'] === \"Blocked\") {\n\n//   } else if (task['column'] === \"Completed\") {\n\n//   }\n// }\n\nfunction useTaskCollection() {\n  return useLocalStorage<{\n    [key in ColumnType]: TaskModel[];\n  }>('tasks', {\n    Todo: [\n      {\n        id: uuidv4(),\n        column: ColumnType.TO_DO,\n        title: 'Task 1',\n        color: 'blue.300',\n      },\n    ],\n    'In Progress': [\n      {\n        id: uuidv4(),\n        column: ColumnType.IN_PROGRESS,\n        title: 'Task 2',\n        color: 'yellow.300',\n      },\n    ],\n    Blocked: [\n      {\n        id: uuidv4(),\n        column: ColumnType.BLOCKED,\n        title: 'Task 3',\n        color: 'red.300',\n      },\n    ],\n    Completed: [\n      // {\n      //   id: uuidv4(),\n      //   column: ColumnType.COMPLETED,\n      //   title: 'Task 4',\n      //   color: 'green.300',\n      // },\n    ],\n  });\n}\n\nexport default useTaskCollection;\n"],"mappings":";AAAA,SAASA,eAAe,QAAQ,aAAa;AAE7C,SAASC,EAAE,IAAIC,MAAM,QAAQ,MAAM;AACnC,SAASC,UAAU,QAAQ,mBAAmB;AAG9C,OAAO,yBAAyB;AAEhC,OAAO,2BAA2B;AAClC,OAAOC,QAAQ,MAAM,qBAAqB;AAC1C,OAAO,sBAAsB;AAC7B,OAAO,2BAA2B;AAElC,SAASC,OAAO,QAAQ,eAAe;AAGvC,MAAMC,IAAI,GAAGD,OAAO,CAAC,CAAC;AACtB,MAAME,SAAS,GAAGH,QAAQ,CAACG,SAAS,CAAC,CAAC;AAEtC,MAAMC,SAAS,GAAGD,SAAS,CAACE,UAAU,CAAC,OAAO,CAAC;AAC/C,IAAIC,IAAiB,GAAG,EAAE;AAC1B,IAAIC,UAAU,GAAG,EAAE;AACnB,IAAIC,OAAO,GAAG,EAAE;AAChB,IAAIC,SAAS,GAAG,EAAE;AAElB,MAAMC,KAAK,GAAGN,SAAS,CAACO,OAAO,CAAC,IAAI,CAAC;AACrCC,OAAO,CAACC,GAAG,CAAC,SAAS,GAAGH,KAAK,CAAC;AAC9B;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA,SAASI,iBAAiBA,CAAA,EAAG;EAAAC,EAAA;EAC3B,OAAOnB,eAAe,CAEnB,OAAO,EAAE;IACVoB,IAAI,EAAE,CACJ;MACEC,EAAE,EAAEnB,MAAM,CAAC,CAAC;MACZoB,MAAM,EAAEnB,UAAU,CAACoB,KAAK;MACxBC,KAAK,EAAE,QAAQ;MACfC,KAAK,EAAE;IACT,CAAC,CACF;IACD,aAAa,EAAE,CACb;MACEJ,EAAE,EAAEnB,MAAM,CAAC,CAAC;MACZoB,MAAM,EAAEnB,UAAU,CAACuB,WAAW;MAC9BF,KAAK,EAAE,QAAQ;MACfC,KAAK,EAAE;IACT,CAAC,CACF;IACDE,OAAO,EAAE,CACP;MACEN,EAAE,EAAEnB,MAAM,CAAC,CAAC;MACZoB,MAAM,EAAEnB,UAAU,CAACyB,OAAO;MAC1BJ,KAAK,EAAE,QAAQ;MACfC,KAAK,EAAE;IACT,CAAC,CACF;IACDI,SAAS,EAAE;MACT;MACA;MACA;MACA;MACA;MACA;IAAA;EAEJ,CAAC,CAAC;AACJ;AAACV,EAAA,CArCQD,iBAAiB;EAAA,QACjBlB,eAAe;AAAA;AAsCxB,eAAekB,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}